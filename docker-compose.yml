version: '3.2'

services:

  visualizer:
    image: bogdanbujor/visualizer:1.0
    ports:
      - "8080:8080"
    deploy:
      placement:
        constraints:
          - node.role == manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
 
 ################################################################
  # Prometheus 
  #  - runs on manager node
  ################################################################
  prometheus:
    image: prom/prometheus
    volumes:
      - $PWD/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    deploy:
        #traefik.port: "9090"
        #traefik.frontend.rule: "Host:prometheus.myhost.com"
        # traefik.frontend.auth.basic.usersFile: /path/.htpasswd   
        #traefik.frontend.auth.basic.users: "admin:$$axxxxxxxxxxxxxxxxxxxxxxxxx"
        #traefik.docker.network: "imixs-proxy-net" 
      placement:
        constraints:
          - node.role == manager
    networks:
      - frontend
      - backend     


  ################################################################
  # Prometheus node-exporter 
  # For each node a separte service needs to be added 
  ################################################################
  manager-001:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'
      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - backend

  worker-001:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'
      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

    networks:
      - backend


  ################################################################
  # cAdvisor
  #   - it's a running daemon that collects, aggregates, processes, and exports information about each running container
  #   - gathers separate info on each container
  #   - https://github.com/google/cadvisor   
  ################################################################
  docker-manager-001:
    image: google/cadvisor:latest
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      placement:
        constraints:
         # Hostname of the first manager node!
          - node.hostname == node1
    networks:
      - backend

  docker-worker-001:
    image: google/cadvisor:latest
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      placement:
        constraints:
         # Hostname of the first woker node!
          - node.hostname == node2
    networks:
      - backend

     
  ################################################################
  # Grafana
  #  - runs on manager node
  ################################################################
  grafana:
    image: grafana/grafana
    #environment:
    #  GF_SMTP_ENABLED: "true"
    #  GF_SMTP_HOST: "mailgateway:25"
    #  GF_SMTP_FROM_ADDRESS: "alert@myhost.com"
    volumes: 
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    deploy:
#      labels:
#        traefik.port: "3000"
#        traefik.frontend.rule: "Host:grafana.myhost.com"
#        traefik.docker.network: "imixs-proxy-net" 
       replicas: 1
       restart_policy:
         condition: on-failure
    networks:
      - frontend
      - backend

networks:
  frontend:
    driver: overlay 
  backend: 
  
volumes:
  grafana-data: